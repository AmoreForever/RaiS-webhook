import logging
import json
import os
from fastapi import FastAPI, Request, HTTPException
import httpx
from typing import Dict, Any, Optional
from pydantic import BaseModel
from datetime import datetime


logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

app = FastAPI(title="amoCRM Rais Integration")


TELEGRAM_TOKEN = ""
TELEGRAM_CHAT_IDS = {
    "default": "",
}

DATA_DIR = "data"
os.makedirs(DATA_DIR, exist_ok=True)


class DataManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ amoCRM"""

    @staticmethod
    def get_status_file_path(scope_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        return os.path.join(DATA_DIR, f"lead_statuses_{scope_id}.json")

    @staticmethod
    def load_lead_statuses(scope_id):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å—ã —Å–¥–µ–ª–æ–∫ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        file_path = DataManager.get_status_file_path(scope_id)
        try:
            if os.path.exists(file_path):
                with open(file_path, "r", encoding="utf-8") as file:
                    return json.load(file)
            return {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ —Å–¥–µ–ª–æ–∫: {str(e)}")
            return {}

    @staticmethod
    def save_lead_statuses(scope_id, statuses):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã —Å–¥–µ–ª–æ–∫ –≤ JSON —Ñ–∞–π–ª"""
        file_path = DataManager.get_status_file_path(scope_id)
        try:
            with open(file_path, "w", encoding="utf-8") as file:
                json.dump(statuses, file, ensure_ascii=False, indent=2)
            logger.info(f"–°—Ç–∞—Ç—É—Å—ã —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {scope_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ —Å–¥–µ–ª–æ–∫: {str(e)}")

    @staticmethod
    def update_lead_status(scope_id, status_id, status_name):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏"""
        statuses = DataManager.load_lead_statuses(scope_id)
        status_id_str = str(status_id)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å JSON

        if status_id_str not in statuses:
            statuses[status_id_str] = {
                "name": status_name,
                "first_seen": datetime.now().isoformat(),
            }
        else:
            statuses[status_id_str]["name"] = status_name
            statuses[status_id_str]["last_updated"] = datetime.now().isoformat()

        DataManager.save_lead_statuses(scope_id, statuses)
        return statuses

    @staticmethod
    def get_status_name(scope_id, status_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ –µ–≥–æ ID"""
        statuses = DataManager.load_lead_statuses(scope_id)
        status_id_str = str(status_id)
        return statuses.get(status_id_str, {}).get("name", f"–°—Ç–∞—Ç—É—Å {status_id}")


class TelegramMessage:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram"""

    @staticmethod
    async def send_message(
        chat_id: str, text: str, parse_mode: str = "HTML"
    ) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —á–∞—Ç"""
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        async with httpx.AsyncClient() as client:
            response = await client.post(
                url, json={"chat_id": chat_id, "text": text, "parse_mode": parse_mode}
            )
            return response.json()


class AmoCRMHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ amoCRM"""

    @staticmethod
    def format_lead_message(
        lead: Dict[str, Any], event_type: str, scope_id: str
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ"""
        if event_type == "new":
            emoji = "üìù"
            title = "–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–¥–µ–ª–∫–∞"
        elif event_type == "update":
            emoji = "üîÑ"
            title = f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–¥–µ–ª–∫–∞"
        elif event_type == "success":
            emoji = "üéâ"
            title = "–£—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–¥–µ–ª–∫–∞"
        else:
            emoji = "‚ÑπÔ∏è"
            title = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ"

        message = f"{emoji} <b>{title}</b>\n"
        message += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {lead.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"

        if "price" in lead:
            message += f"–ë—é–¥–∂–µ—Ç: {lead.get('price', '0')} —Ä—É–±.\n"

        if "responsible_user_name" in lead:
            message += (
                f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {lead.get('responsible_user_name', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')}\n"
            )

        status_id = lead.get("status_id")
        if status_id:
            status_name = None
            if "status_name" in lead:
                status_name = lead["status_name"]

                DataManager.update_lead_status(scope_id, status_id, status_name)

            if not status_name:
                status_name = DataManager.get_status_name(scope_id, status_id)

            message += f"–°—Ç–∞—Ç—É—Å: {status_name}\n"

        return message.strip()

    @staticmethod
    def format_task_message(task: Dict[str, Any], event_type: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ"""
        if event_type == "new":
            emoji = "‚è∞"
            title = "–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞"
        elif event_type == "completed":
            emoji = "‚úÖ"
            title = "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
        else:
            emoji = "üìã"
            title = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ"

        message = f"{emoji} <b>{title}</b>\n"
        message += f"–¢–µ–∫—Å—Ç: {task.get('text', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}\n"

        if "complete_till" in task:

            complete_till = task.get("complete_till")
            if isinstance(complete_till, int) and complete_till > 1000000000:
                complete_till = datetime.fromtimestamp(complete_till).strftime(
                    "%d.%m.%Y %H:%M"
                )
            message += f"–°—Ä–æ–∫: {complete_till}\n"

        if "responsible_user_name" in task:
            message += (
                f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {task.get('responsible_user_name', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')}\n"
            )

        return message.strip()

    @staticmethod
    def format_contact_message(contact: Dict[str, Any], event_type: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ"""
        if event_type == "new":
            emoji = "üë§"
            title = "–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç"
        else:
            emoji = "üë§"
            title = "–û–±–Ω–æ–≤–ª–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç"

        message = f"{emoji} <b>{title}</b>\n"
        name = contact.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
        message += f"–ò–º—è: {name}\n"

        if "custom_fields" in contact:
            for field in contact.get("custom_fields", []):
                if field.get("code") == "PHONE":
                    for value in field.get("values", []):
                        message += f"–¢–µ–ª–µ—Ñ–æ–Ω: {value.get('value', '')}\n"
                        break
                if field.get("code") == "EMAIL":
                    for value in field.get("values", []):
                        message += f"Email: {value.get('value', '')}\n"
                        break

        return message.strip()


@app.post("/webhooks/amocrm/{scope_id}")
async def amocrm_webhook(scope_id: str, request: Request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç amoCRM"""
    try:

        data = await request.json()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç amoCRM (–∞–∫–∫–∞—É–Ω—Ç {scope_id}): {data}")

        chat_id = TELEGRAM_CHAT_IDS.get(scope_id, TELEGRAM_CHAT_IDS["default"])

        if "leads" in data:
            await process_leads(data["leads"], chat_id, scope_id)

        if "tasks" in data:
            await process_tasks(data["tasks"], chat_id)

        if "contacts" in data:
            await process_contacts(data["contacts"], chat_id)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ç—É—Å–∞—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö
        if "lead_statuses" in data:
            process_lead_statuses(data["lead_statuses"], scope_id)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ—Ä–æ–Ω–∫–∞—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if "pipelines" in data:
            process_pipelines(data["pipelines"], scope_id)

        return {"status": "success", "message": "Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ"}

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")


async def process_leads(leads: list, chat_id: str, scope_id: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–¥–µ–ª–æ–∫ –∏–∑ webhook"""
    for lead in leads:

        if "add" in lead:

            message = AmoCRMHandler.format_lead_message(lead, "new", scope_id)
            await TelegramMessage.send_message(chat_id, message)

        elif lead.get("status_id"):

            successful_status_ids = [
                "142",
                "143",
            ]  # ID —Å—Ç–∞—Ç—É—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
            if str(lead.get("status_id")) in successful_status_ids:
                message = AmoCRMHandler.format_lead_message(lead, "success", scope_id)
                await TelegramMessage.send_message(chat_id, message)
            else:

                message = AmoCRMHandler.format_lead_message(lead, "update", scope_id)
                await TelegramMessage.send_message(chat_id, message)

        elif "update" in lead:

            message = AmoCRMHandler.format_lead_message(lead, "update", scope_id)
            await TelegramMessage.send_message(chat_id, message)


async def process_tasks(tasks: list, chat_id: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á –∏–∑ webhook"""
    for task in tasks:
        if "add" in task:

            message = AmoCRMHandler.format_task_message(task, "new")
            await TelegramMessage.send_message(chat_id, message)

        elif task.get("is_completed"):

            message = AmoCRMHandler.format_task_message(task, "completed")
            await TelegramMessage.send_message(chat_id, message)

        elif "update" in task:

            message = AmoCRMHandler.format_task_message(task, "update")
            await TelegramMessage.send_message(chat_id, message)


async def process_contacts(contacts: list, chat_id: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ webhook"""
    for contact in contacts:
        if "add" in contact:

            message = AmoCRMHandler.format_contact_message(contact, "new")
            await TelegramMessage.send_message(chat_id, message)

        elif "update" in contact:

            message = AmoCRMHandler.format_contact_message(contact, "update")
            await TelegramMessage.send_message(chat_id, message)


def process_lead_statuses(statuses: list, scope_id: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—É—Å–∞—Ö —Å–¥–µ–ª–æ–∫"""
    for status in statuses:
        status_id = status.get("id")
        status_name = status.get("name")
        if status_id and status_name:
            DataManager.update_lead_status(scope_id, status_id, status_name)


def process_pipelines(pipelines: list, scope_id: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ—Ä–æ–Ω–∫–∞—Ö –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö"""
    for pipeline in pipelines:
        if "statuses" in pipeline:
            for status in pipeline.get("statuses", []):
                status_id = status.get("id")
                status_name = status.get("name")
                if status_id and status_name:
                    DataManager.update_lead_status(scope_id, status_id, status_name)


@app.get("/status/{scope_id}")
async def get_statuses(scope_id: str):
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤"""
    statuses = DataManager.load_lead_statuses(scope_id)
    return {"scope_id": scope_id, "statuses": statuses}
